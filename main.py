import logging
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from dotenv import load_dotenv
from steps import steps
from check_subscription import check_user_subscription
import asyncio

load_dotenv()
API_TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL")

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
user_states = {}

def get_steps_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    for step in steps:
        kb.insert(types.KeyboardButton(f"–®–∞–≥ {step['step']} ({step['duration_min']}–º)"))
    kb.add("‚ÑπÔ∏è –ò–Ω—Ñ–æ")
    return kb

def get_subscribe_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", url="https://t.me/sunxstyle"))
    kb.add(InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))
    return kb

def get_control_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
        InlineKeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end"),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", callback_data="back"),
        InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º", callback_data="menu")
    )
    return kb

@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    if not await check_user_subscription(bot, message.from_user.id, CHANNEL_USERNAME):
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @sunxstyle, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=get_subscribe_keyboard())

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—Ü–µ! ‚òÄÔ∏è\n–¢—ã –≤ —Ç–∞–π–º–µ—Ä–µ –ø–æ –º–µ—Ç–æ–¥—É —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏.\n–ö–æ–∂–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Å–æ–ª–Ω—Ü—É –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ ‚Äî –∏ –∑–∞–≥–∞—Ä —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ä–æ–≤–Ω—ã–º, –≥–ª—É–±–æ–∫–∏–º –∏ –±–µ–∑ –æ–∂–æ–≥–æ–≤.\n\n–ù–∞—á–∏–Ω–∞–π —Å —à–∞–≥–∞ 1. –î–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ—Ä–µ–ª(–∞), –≤–∞–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—É—Ç—å —Å –Ω–∞—á–∞–ª–∞.\n–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥."
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=get_steps_keyboard())

@dp.callback_query_handler(lambda c: c.data == "check_sub")
async def recheck_sub(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_user_subscription(bot, user_id, CHANNEL_USERNAME):
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=get_steps_keyboard())
    else:
        await bot.answer_callback_query(callback_query.id, text="–¢—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω!", show_alert=True)

@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def info(message: types.Message):
    await message.answer(
        "‚ÑπÔ∏è –ú–µ—Ç–æ–¥ —Å—É–ø–µ—Ä–∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–≥–∞—Ä—É.\n"
        "–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –∫–æ–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Å–æ–ª–Ω—Ü—É, —Å–Ω–∏–∂–∞—è —Ä–∏—Å–∫ –æ–∂–æ–≥–æ–≤ –∏ –ø—è—Ç–µ–Ω.\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥–æ—Ä–∞—Ç—å —Å 7:00 –¥–æ 11:00 –∏ –ø–æ—Å–ª–µ 17:00 ‚Äî –≤ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ–ª–Ω—Ü–µ –º—è–≥–∫–æ–µ,\n"
        "–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –∑–∞–≥–æ—Ä–∞—Ç—å –±–µ–∑ SPF.\n"
        "–¢–∞–∫ –∫–æ–∂–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–≤–æ—é –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—â–∏—Ç—É: –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–µ–ª–∞–Ω–∏–Ω –∏ –≥–æ—Ä–º–æ–Ω—ã –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.\n\n"
        "–° 11:00 –¥–æ 17:00 ‚Äî —Å–æ–ª–Ω—Ü–µ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ. –ï—Å–ª–∏ –æ—Å—Ç–∞—ë—à—å—Å—è –Ω–∞ —É–ª–∏—Ü–µ ‚Äî –Ω–∞–¥–µ–≤–∞–π –æ–¥–µ–∂–¥—É, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π SPF.\n\n"
        "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä—ã–≤–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ 2 —à–∞–≥–∞ –Ω–∞–∑–∞–¥."
    )

@dp.message_handler(lambda message: message.text.startswith("–®–∞–≥"))
async def handle_step(message: types.Message):
    try:
        step_num = int(message.text.split()[1])
        step_data = next(s for s in steps if s["step"] == step_num)
    except Exception:
        return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —à–∞–≥.")

    user_id = message.from_user.id
    user_states[user_id] = {"step": step_num, "pos": 0, "cancel": False}
    await message.answer(f"‚ö°Ô∏è –®–∞–≥ {step_num} ({step_data['duration_min']} –º–∏–Ω)", reply_markup=get_control_keyboard()  # standard controls with –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)

    for idx, position in enumerate(step_data["positions"]):
        if user_states[user_id]["cancel"]:
            return
        user_states[user_id]["pos"] = idx
        await message.answer(f"{position} ‚Äî {step_data['duration_min']} –º–∏–Ω", reply_markup=get_control_keyboard()  # standard controls with –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
        await asyncio.sleep(1)

    await message.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")\nawait message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —à–∞–≥:", reply_markup=get_control_keyboard()  # standard controls with –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
    user_states.pop(user_id, None)

@dp.callback_query_handler(lambda c: c.data in ["skip", "end", "menu", "back"])
async def handle_controls(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data

    if data == "skip":
        await bot.answer_callback_query(callback_query.id, text="–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏—é")
        if user_id in user_states:
            user_states[user_id]["pos"] += 1
    elif data == "end":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à—ë–Ω. –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚òÄÔ∏è", reply_markup=get_steps_keyboard())
        user_states[user_id]["cancel"] = True
    elif data == "menu":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=get_steps_keyboard())
        user_states[user_id]["cancel"] = True
    elif data == "continue":
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —à–∞–≥:", reply_markup=get_steps_keyboard())
        user_states.pop(user_id, None)
    elif data == "back":
        await bot.answer_callback_query(callback_query.id)
        step = max(user_states.get(user_id, {}).get("step", 3) - 2, 1)
        await bot.send_message(user_id, f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —à–∞–≥ {step}", reply_markup=get_steps_keyboard())
        user_states[user_id]["cancel"] = True

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

def get_post_step_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue"),
        InlineKeyboardButton("‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end"),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –Ω–∞ 2 —à–∞–≥–∞", callback_data="back"),
        InlineKeyboardButton("üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º", callback_data="menu")
    )
    return kb